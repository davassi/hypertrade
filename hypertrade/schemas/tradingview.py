"""Typed Pydantic models for TradingView webhook payloads."""

# Pylint: pydantic models are data containers by design
# pylint: disable=R0903

from __future__ import annotations

from datetime import datetime
from decimal import Decimal
from typing import Optional
from pydantic import BaseModel


class General(BaseModel):
    """General metadata about the alert and timing."""

    strategy: Optional[str] = None
    ticker: str
    exchange: str
    interval: str
    time: datetime
    timenow: datetime
    secret: Optional[str] = None
    leverage: Optional[str] = None


class SymbolData(BaseModel):
    """OHLCV snapshot for the symbol."""

    open: Decimal
    close: Decimal
    high: Decimal
    low: Decimal
    volume: Decimal


class Currency(BaseModel):
    """Currency pair details (quote/base)."""

    quote: str
    base: str


class Position(BaseModel):
    """Optional current position size."""

    position_size: Decimal


class Order(BaseModel):
    """Order instruction generated by the strategy."""

    action: str
    contracts: Decimal
    price: Decimal
    id: str
    comment: Optional[str] = None
    alert_message: Optional[str] = None


class Market(BaseModel):
    """Market context around current and previous positions."""

    position: str
    position_size: Decimal
    previous_position: str
    previous_position_size: Decimal


class TradingViewWebhook(BaseModel):
    """Top-level TradingView webhook payload."""

    general: General
    symbol_data: SymbolData
    currency: Currency
    position: Optional[Position] = None
    order: Order
    market: Market
